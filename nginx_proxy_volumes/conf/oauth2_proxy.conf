# Any request to this server will first be sent to this URL
auth_request /validate;

auth_request_set $auth_user $upstream_http_x_vouch_user;

location = /validate {
	# forward the /validate request to Vouch Proxy
    proxy_pass http://oauth2_proxy:9090/validate;
    
	# be sure to pass the original host header
    proxy_set_header Host $http_host;

	# Vouch Proxy only acts on the request headers
	proxy_pass_request_body off;
	proxy_set_header Content-Length "";

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

	# optionally add X-Vouch-User as returned by Vouch Proxy along with the request
	auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
	auth_request_set $auth_resp_x_vouch_idp_claims_email $upstream_http_x_vouch_idp_claims_email;
	auth_request_set $auth_resp_x_vouch_idp_claims_discriminator $upstream_http_x_vouch_idp_claims_discriminator;
	auth_request_set $auth_resp_x_vouch_idp_claims_id $upstream_http_x_vouch_idp_claims_id;
	auth_request_set $auth_resp_x_vouch_idp_claims_guilds $upstream_http_x_vouch_idp_claims_guilds;
	auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;

	# these return values are used by the @error401 call
    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
}

# if validate returns `401 not authorized` then forward the request to the error401block
error_page 401 = @error401;

# If the user is not logged in, redirect them to Vouch's login URL
location @error401 {
    return 302 https://login.example.net/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
}

proxy_set_header Remote-User $auth_user;

proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection "upgrade";
